[{"path":"/articles/create_raster.html","id":"overview","dir":"Articles","previous_headings":"","what":"overview","title":"Generate a EML entity of type spatialRaster","text":"Generate EML metadata type spatialRaster. generally three types approaches generating EML entities type spatialRaster: raster single band continuous variable (e.g., NDVI). case, pass appropriate metadata meaning units raster value function parameters. raster multi-band raster (e.g., hyperspectral data). case, pass appropriate metadata meaning units raster value function parameters, generate yaml file raster value categories meanings *_attrs.yaml file. raster single band categorical variable (e.g., land cover). case, pass appropriate metadata meaning units raster value function parameters, generate yaml file raster value categories meanings using write_raster_factors() function. capeml package uses older approach identifying spatialRaster entities included dataset, name entity extension _SV. , spatialRaster entities named extension, included capeml workflow data_objects.yaml file.","code":""},{"path":"/articles/create_raster.html","id":"spatial-projection","dir":"Articles","previous_headings":"","what":"spatial projection","title":"Generate a EML entity of type spatialRaster","text":"projection required EML spatialRaster entities. critical piece metadata provided supplying numeric epsg code projection (e.g., 4326 WGS 1984). Ultimately, must value must paired EML-compliant projection name (see list ), package attempt match stop match available. package includes limited number epsg codes matched EML-compliant projection names, mostly commonly used southwestern USA investigators. function stop match identified, user contact package administrator add projections included.","code":""},{"path":"/articles/create_raster.html","id":"harvested-raster-metadata","dir":"Articles","previous_headings":"","what":"harvested raster metadata","title":"Generate a EML entity of type spatialRaster","text":"addition user-supplied metadata, raster read R environment (raster package) additional metadata harvested, including: raster value number type (rasters < 500 Mb), raster extents, number raster bands, cell size. horizontalAccuracy verticalAcurracy attributes required EML , generally known, string METADATA_NOT_PROVIDED provided content two attributes; resulting EML hand-edited adjust values cases accuracy data known. Note EML requires geographic extents provided decimal degrees. often impractical inadvisable change projection rasters, spatial coverage constructed projection raster units meters.","code":""},{"path":"/articles/create_raster.html","id":"example-case-1-single-band-with-a-continuous-variable-e-g--ndvi","dir":"Articles","previous_headings":"","what":"example case 1: single band with a continuous variable (e.g., NDVI)","title":"Generate a EML entity of type spatialRaster","text":"case, pass relevant metadata description raster, raster value, raster units via function parameters - supporting metadata files. Note name spatialRaster entity (NAIP_NDVI_CAP2021-0000000000-0000000000_SV) (1) _SV extension, (2) rather cumbersome. name unfortunate case , long, dashes digits require wrapped back ticks. naming spatialRaster entity based raster file name best practice (especially dealing many rasters), required name long _SV extension work.","code":"`NAIP_NDVI_CAP2021-0000000000-0000000000_SV` <- capemlGIS::create_raster(   raster_file              = \"NAIP_NDVI_CAP2021-0000000000-0000000000.TIF\",   description              = \"NDVI of central Arizona region derived from 2021 NAIP imagery\",   epsg                     = 32612,   raster_value_description = \"Normalized Difference Vegetation Index (NDVI)\",   raster_value_units       = \"UNITLESS\",   geographic_description   = \"central Arizona, USA\",   project_naming           = FALSE )"},{"path":"/articles/create_raster.html","id":"example-case-2-the-raster-is-a-multi-band-raster-e-g--hyperspectral-data","dir":"Articles","previous_headings":"","what":"example case 2: the raster is a multi-band raster (e.g., hyperspectral data)","title":"Generate a EML entity of type spatialRaster","text":"case, raster MNDWI 5 bands, one water index season one entire year. single-band raster, pass metadata (e.g., description, epsg) via parameter functions details band (can ) articulated supporting metadata file. data entity types, metadata file named raster name _attrs.yaml extension (.e., MNDWI_multiseason_CAPLTER_1998_attrs.yaml example). currently function create metadata file multi-band rasters, user must create file manually. file yaml file structure like example: build raster entity, package look metadata file include metadata attribute details resulting EML. important note logic connecting contents metadata file raster file, user must ensure metadata file accurate complete. example, commented raster_value_description raster_value_units parameters metadata provided separately band raster via MNDWI_multiseason_CAPLTER_1998_attrs.yaml file (arguments simply ignored commented parameters).","code":"|   annual:     attributeName: annual     attributeDefinition: 'Modified Normalized Difference Water Index (MNDWI) based on median-composite Landsat images from the entire calendar year (January 1st - December 31st)'     propertyURI: ''     propertyLabel: ''     valueURI: ''     valueLabel: ''     unit: 'UNITLESS'     numberType: real     minimum: ''     maximum: ''     columnClasses: numeric   1_winter:     attributeName: 1_winter     attributeDefinition: 'Modified Normalized Difference Water Index (MNDWI) based on median-composite Landsat images from the entire calendar year (December 21st - March 19th)'     propertyURI: ''     propertyLabel: ''     valueURI: ''     valueLabel: ''     unit: 'UNITLESS'     numberType: real     minimum: ''     maximum: ''     columnClasses: numeric   2_spring:     attributeName: 2_spring     attributeDefinition: 'Modified Normalized Difference Water Index (MNDWI) based on median-composite Landsat images from the entire calendar year (March 20th - June 20th)'     propertyURI: ''     propertyLabel: ''     valueURI: ''     valueLabel: ''     unit: 'UNITLESS'     numberType: real     minimum: ''     maximum: ''     columnClasses: numeric   3_summer:     attributeName: 3_summer     attributeDefinition: 'Modified Normalized Difference Water Index (MNDWI) based on median-composite Landsat images from the entire calendar year (June 21st - September 21st)'     propertyURI: ''     propertyLabel: ''     valueURI: ''     valueLabel: ''     unit: 'UNITLESS'     numberType: real     minimum: ''     maximum: ''     columnClasses: numeric   4_fall:     attributeName: 4_fall     attributeDefinition: 'Modified Normalized Difference Water Index (MNDWI) based on median-composite Landsat images from the entire calendar year (September 22nd - December 20th)'     propertyURI: ''     propertyLabel: ''     valueURI: ''     valueLabel: ''     unit: 'UNITLESS'     numberType: real     minimum: ''     maximum: ''     columnClasses: numeric MNDWI_multiseason_CAPLTER_1998_SV <- capemlGIS::create_raster(   raster_file              = \"MNDWI_multiseason_CAPLTER_1998.tif\",   description              = \"Modified Normalized Difference Water Index (MNDWI) calculated from Landsat imagery (30-m resolution) annual and seasonal bands\",   epsg                     = 32612,   # raster_value_description = \"Modified Normalized Difference Water Index (MNDWI)\",   # raster_value_units       = \"UNITLESS\",   geographic_description   = \"central Arizona, USA\",   project_naming           = FALSE )"},{"path":"/articles/create_raster.html","id":"batch-processing-multiple-rasters","dir":"Articles","previous_headings":"example case 2: the raster is a multi-band raster (e.g., hyperspectral data)","what":"batch processing multiple rasters","title":"Generate a EML entity of type spatialRaster","text":"good opportunity demonstrate can use tools process many rasters batch. example, directory rasters, unique year filename. use list.files() function get list raster files directory, use purrr::walk() function iterate list files process raster create_raster() function. spatialRaster entity assigned global environment name includes year. Given multi-spectral example (.e., drawing metadata file raster), raster corresponding metadata file working directory appropriate naming convention, e.g.: simple Bash script convenient way generate series _attrs.yaml files template. …process…","code":"#!/bin/bash  # Input template file path TEMPLATE_FILE=\"./template.yaml\"  # Destination folder (you can change this to where you want the files) DEST_FOLDER=\"./\"  # Ensure the destination folder exists mkdir -p \"$DEST_FOLDER\"  # Generate files for years 1998 to 2023 for YEAR in {1998..2023}; do   # Create the filename based on the specified format   OUTPUT_FILE=\"${DEST_FOLDER}/MNDWI_multiseason_CAPLTER_${YEAR}_attrs.yaml\"    # Copy the template to the new file   cp \"$TEMPLATE_FILE\" \"$OUTPUT_FILE\" done  echo \"Files have been generated in the '$DEST_FOLDER' folder.\" process_raster <- function(filename) {    fileBasename <- basename(filename)   year         <- stringr::str_extract(fileBasename, \"\\\\d+\")    rasterDesc <- paste0(\"Modified Normalized Difference Water Index (MNDWI) calculated from Landsat imagery (30-m resolution) annual and seasonal bands: \", year)    eml_raster <- capemlGIS::create_raster(     raster_file              = filename,     description              = rasterDesc,     epsg                     = 32612,     # raster_value_description = \"Modified Normalized Difference Water Index (MNDWI)\",     # raster_value_units       = \"UNITLESS\",     geographic_description   = \"central Arizona, USA\",     project_naming           = FALSE   )    assign(     x     = paste0(fileBasename, \"_SR\"),     value = eml_raster,     envir = .GlobalEnv   )  }  list_of_rasters <- list.files(   path       = \"working_dir\",   pattern    = \"tif$\",   full.names = TRUE )  purrr::walk(list_of_rasters, process_raster)"},{"path":"/articles/create_raster.html","id":"example-case-3-the-raster-is-a-single-band-with-a-categorical-variable-e-g--land-cover","dir":"Articles","previous_headings":"","what":"example case 3: the raster is a single band with a categorical variable (e.g., land cover)","title":"Generate a EML entity of type spatialRaster","text":"SECTION CONSTRUCTION !!! raster values categorical, generate metadata file catalog unique raster value categories meaning using write_raster_factors() function. Raster categorical values metadata example: example, write_raster_factors() generate yaml template file filename format raster_name_factors.yaml field provide descriptor category. create_spatialRaster() look appropriately named yaml file working directory include metadata attribute details resulting EML. calling function Call create_spatialRaster() function generate EML describe raster. Output function yields EML can incorporated metadata data set. example , raster values NDVI, categorical, created NAIP_NDVI_2015_factors.yaml file write_raster_factors() function. Rather, provided unit NDVI measurement (“dimensionless”) passed raster_value_units argument. description raster resource (passed description argument) required, geographic description (passed geographic_description argument). However, geographic description argument optional, included, function use project-level geographic description included requisite config.yaml file.","code":"raster_description <- \"NDVI for the central Arizona region derived from 2015 NAIP imagery. NAIP NDVI data are presented as a series of tiles each representing a portion of the overall central Arizona coverage area. The relative position of this tile to the entire coverage area is detailed in the files NAIP_GRID.kml, NAIP_GRID.pdf, and NAIP_GRID.png included with this data set.\"  ndvi_geographic_description <- \"one in a series of tiles covering the central-Arizona Phoenix region\"  NAIP_NDVI_2015_SV <- capemlGIS::create_spatialRaster(    raster_file               = \"path-to-file/NAIP_NDVI_2015.tiff\",    description               = raster_description,    epsg                      = 4326,    raster_value_description  = \"Normalized Difference Vegetation Index (NDVI)\",    raster_value_units        = \"dimensionless\",    geographic_description    = \"ndvi_geographic_description\",    project_naming            = FALSE  )"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"S Earl. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Earl S (2025). capemlGIS: CAP LTER package generating EML spatialVector spatialRaster metadata. R package version 1.9.0.","code":"@Manual{,   title = {capemlGIS: CAP LTER package for generating EML spatialVector and spatialRaster metadata},   author = {S Earl},   year = {2025},   note = {R package version 1.9.0}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"capemlGIS: tools to aid the generation of EML metadata for spatial vectors and rasters","what":"overview","title":"CAP LTER package for generating EML spatialVector and spatialRaster metadata","text":"package extends CAPLTER/capeml package facilitate creation EML spatialRaster spatialVector objects metadata.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"capemlGIS: tools to aid the generation of EML metadata for spatial vectors and rasters","what":"installation","title":"CAP LTER package for generating EML spatialVector and spatialRaster metadata","text":"Install GitHub (installing devtools package:","code":"devtools::install_github(\"CAPLTER/capemlGIS\")"},{"path":"/index.html","id":"getting-started","dir":"","previous_headings":"capemlGIS: tools to aid the generation of EML metadata for spatial vectors and rasters","what":"getting started","title":"CAP LTER package for generating EML spatialVector and spatialRaster metadata","text":"Creating EML dataset starts CAPLTER/capeml package, capemlGIS designed facilitate creating EML entities type spatialRaster spatialVector. Users please start capeml workflow, including creating config.yaml file feature project details spatialRaster spatialVector require processing.","code":""},{"path":[]},{"path":"/index.html","id":"eml","dir":"","previous_headings":"capemlGIS: tools to aid the generation of EML metadata for spatial vectors and rasters > options","what":"EML","title":"CAP LTER package for generating EML spatialVector and spatialRaster metadata","text":"package defaults current version EML. desired, users can switch previous version emld::eml_version(\"eml-2.1.1\").","code":""},{"path":"/index.html","id":"project-naming","dir":"","previous_headings":"capemlGIS: tools to aid the generation of EML metadata for spatial vectors and rasters > options","what":"project naming","title":"CAP LTER package for generating EML spatialVector and spatialRaster metadata","text":"EML-generating functions capeml capemlGIS packages create physical objects EML references objects. default, package name output files format project identifier (number)_object-name.file-extension (e.g., 664_site_map.kml). target object (e.g., site_map.png previous example) renamed additional metadata object name referenced EML metadata. Project naming can disabled setting projectNaming project_naming flag FALSE. set FALSE, object name changed, name data object read R environment written file referenced EML. Note project identifier (number) passed argument, must exist config.yaml (identifer).","code":""},{"path":"/index.html","id":"tools-to-generate-entity-metadata","dir":"","previous_headings":"capemlGIS: tools to aid the generation of EML metadata for spatial vectors and rasters","what":"tools to generate entity metadata","title":"CAP LTER package for generating EML spatialVector and spatialRaster metadata","text":"note write_attributes write_factors capeml package capeml::write_attributes() creates template yaml file supplying attribute metadata spatial vector object resides R environment. capeml::write_factors() creates template yaml file supplying code definition metadata factors vector data object resides R environment. capemlGIS::write_raster_factors() creates template yaml file supplying code definition metadata spatial rasters raster values categorical.","code":""},{"path":"/index.html","id":"tools-to-create-spatial-data-objects-and-corresponding-eml-metadata-entities","dir":"","previous_headings":"capemlGIS: tools to aid the generation of EML metadata for spatial vectors and rasters","what":"tools to create spatial data objects and corresponding EML metadata entities","title":"CAP LTER package for generating EML spatialVector and spatialRaster metadata","text":"EML entity type spatialRaster see vignette detail EML entity type spatialVector can added EML dataset. Input data written kml GeoJSON file project naming (selected). EML entity type spatialVector can added EML dataset. Input data written shapefile project naming (selected). Shapefile files written directory zipped. EML entity type spatialVector can added EML dataset. Harvests relevant files constitute single shapefile directory zipped. package_vector_shape differs create_* series functions write data file rather packages files constitute shapefile new directory zipped inclusion data package. Use package shape important input data read R otherwise altered construction dataset. limitation approach data modified.","code":""},{"path":[]},{"path":"/index.html","id":"output-to-shapefile","dir":"","previous_headings":"capemlGIS: tools to aid the generation of EML metadata for spatial vectors and rasters > overview: create a spatialVector","what":"output to shapefile","title":"CAP LTER package for generating EML spatialVector and spatialRaster metadata","text":"","code":"# load spatial vector object; because create_vector_shape will generate a new # shapefile, we have complete flexibility over the shapefile name and # manipulating the data - here we are starting with an existing shapefile named # CORETT but will generate a shapefile with the name # ejido_titles_points_of_decree  ejido_titles_points_of_decree <- sf::read_sf(   dsn   = \"data/Regularizacion/ejidal\",   layer = \"CORETT\"   ) |> formatting_or_data_manipuation...  # write attributes (and factors if relevant)  try(   capeml::write_attributes(     dfname    = ejido_titles_points_of_decree,     overwrite = FALSE   ) )  # generate a description for the data entity  ejido_titles_points_of_decree_desc <- \"polygons of land regularized by the National Agency, CORETT; polygons were georeferenced from 281 paper maps, consolidated into 87 unique regularization degrees of ejidos that became privitzed from 1987-2007; includes the area of each polygon, the date of regularization, the name of the ejido, the delegation, and the 'plane number' that could be used to find the original map file in the CORETT office; it only includes expropriation for the delegations Xochimilco, Magdalena Contreras, Iztapalapa, Tlahuac, Gustavo Madero, Cuajimalpa, Alvaro Obregon, Tlalpan, Coyoacan, and Milpa Alta\"  ejido_titles_points_of_decree_SV <- capemlGIS::create_vector_shape(   vector_name   = ejido_titles_points_of_decree,   description   = ejido_titles_points_of_decree_desc,   coord_sys     = \"WGS_1984_UTM_Zone_55N\",   layer_opts    = \"SHPT=POLYGON\",   overwrite     = TRUE,   projectNaming = TRUE,   )  # The resulting spatialVector entity can be added to a EML dataset. Note also # in this example that we are passing additional layer options, which # ultimately feed to sf::st_write, necessary here to generate a multi-polygon # shapefile."},{"path":"/index.html","id":"output-to-kml","dir":"","previous_headings":"capemlGIS: tools to aid the generation of EML metadata for spatial vectors and rasters > overview: create a spatialVector","what":"output to kml","title":"CAP LTER package for generating EML spatialVector and spatialRaster metadata","text":"workflow writing kml GeoJSON nearly identical workflow writing shapefile. differences include need (, least, ) Name field writing kml file serves unique identifier data entity (added workflow additional line call mutate). Also, parameters different, unlike create_vector_shape, requires user pass EML-compliant coordinate reference system, since create_vector writes new kml GeoJSON file, resulting CRS always EPSG 4326 thus hard-coded function.","code":"# load spatial vector object; because create_vector_shape will generate a new # shapefile, we have complete flexibility over the shapefile name and # manipulating the data - here we are starting with an existing shapefile named # CORETT but will generate a shapefile with the name # ejido_titles_points_of_decree   ejido_titles_points_of_decree <- sf::read_sf(   dsn   = \"path-to-directory/\",   layer = \"CORETT\"   ) |> formatting_or_data_manipuation...  # write attributes (and factors if relevant)  try(write_attributes(ejido_titles_points_of_decree, overwrite = FALSE))  # generate a description for the data entity  ejido_titles_points_of_decree_desc <- \"polygons of land regularized by the National Agency, CORETT; polygons were georeferenced from 281 paper maps, consolidated into 87 unique regularization degrees of ejidos that became privatized from 1987-2007; includes the area of each polygon, the date of regularization, the name of the ejido, the delegation, and the 'plane number' that could be used to find the original map file in the CORETT office; it only includes expropriation for the delegations Xochimilco, Magdalena Contreras, Iztapalapa, Tlahuac, Gustavo Madero, Cuajimalpa, Alvaro Obregon, Tlalpan, Coyoacan, and Milpa Alta\"  ejido_titles_points_of_decree_SV <- capemlGIS::create_vector(   vector_name   = ejido_titles_points_of_decree,   description   = ejido_titles_points_of_decree_desc,   driver        = \"kml\",   overwrite     = TRUE,   projectNaming = TRUE   )  # The resulting spatialVector entity can be added to a EML dataset."},{"path":"/reference/create_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"generate a EML entity of type spatialRaster — create_raster","title":"generate a EML entity of type spatialRaster — create_raster","text":"create_raster generates EML entity type spatialRaster","code":""},{"path":"/reference/create_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generate a EML entity of type spatialRaster — create_raster","text":"","code":"create_raster(   raster_file,   description,   epsg,   raster_value_description,   raster_value_units,   geographic_description = NULL,   project_naming = FALSE,   file_url = NULL )"},{"path":"/reference/create_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generate a EML entity of type spatialRaster — create_raster","text":"raster_file (character) Quoted full path raster file. description (character) Description raster. epsg (integer) Four- five-digit EPSG numeric code raster Coordinate Reference System (CRS) raster_value_description (character) Description raster values raster_value_units (character) Raster value units. Units must EML-compliant annotated custom unit definition. argument ignored categorical values (.e., indicated corresponding `_factors.yaml` file). geographic_description (character) textual description geographic study area raster. parameter allows user overwrite study-wide geographic_description value provided config.yaml (default). project_naming (logical) Logical indicating raster file renamed per style: project id + base file name + file extension. true, create_raster look package identifier config.yaml. file_url (character) Optional parameter detailing online location data entity can accessed. cases, online location files dataset detailed config.yaml. file_url allows user override project-level configuration config.yaml provide specific, unique resource (e.g., link file Dropbox) data entity.","code":""},{"path":"/reference/create_raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"generate a EML entity of type spatialRaster — create_raster","text":"EML spatial data object returned. Additionally, project_naming set TRUE spatial data file renamed project id + base file name + file extension (zip case multiple files aggregated).","code":""},{"path":"/reference/create_raster.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"generate a EML entity of type spatialRaster — create_raster","text":"spatialRaster entity created single data file (e.g., CAP_1985.img). resulting entity renamed project id + base file name + file extension base file name + file extension depending desired output.","code":""},{"path":"/reference/create_raster.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"generate a EML entity of type spatialRaster — create_raster","text":"EML requires geographic extents provided decimal degrees. often impractical inadvisable change projection rasters, spatial coverage constructed projection raster units meters.","code":""},{"path":"/reference/create_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"generate a EML entity of type spatialRaster — create_raster","text":"","code":"if (FALSE) { # \\dontrun{  rasterDesc <- \"NDVI for the central Arizona region derived from 2015 NAIP imagery. NAIP NDVI data are presented as a series of tiles each representing a portion of the overall central Arizona coverage area. The relative position of this tile to the entire coverage area is detailed in the files NAIP_GRID.kml, NAIP_GRID.pdf, and NAIP_GRID.png included with this data set.\"  my_area <- \"one in a series of tiles covering the central-Arizona Phoenix region\" # supercedes yaml  NAIP_NDVI_2015_SV <- capemlGIS::create_raster(    raster_file               = \"path-to-file/NAIP_NDVI_2015.tiff\",    description               = rasterDesc,    epsg                      = 4326,    raster_value_description  = \"Normalized Difference Vegetation Index (NDVI)\",    raster_value_units        = \"UNITLESS\",    geographic_description    = \"my_area\",    project_naming            = FALSE  )  } # }"},{"path":"/reference/create_spatialVector.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a spatial file of type KML and create metadata of type spatial vector (deprecated: use create_vector or create_vector_shape) — create_spatialVector","title":"Construct a spatial file of type KML and create metadata of type spatial vector (deprecated: use create_vector or create_vector_shape) — create_spatialVector","text":"create_spatialVector generates EML entity type   spatialVector","code":""},{"path":"/reference/create_spatialVector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a spatial file of type KML and create metadata of type spatial vector (deprecated: use create_vector or create_vector_shape) — create_spatialVector","text":"","code":"create_spatialVector(   svname,   description,   geoDescription,   baseURL = \"https://data.gios.asu.edu/datasets/cap/\",   projectNaming = TRUE )"},{"path":"/reference/create_spatialVector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a spatial file of type KML and create metadata of type spatial vector (deprecated: use create_vector or create_vector_shape) — create_spatialVector","text":"svname (character) unquoted name spatial data object R environment. description (character) Description vector resource. geoDescription (character) textual description geographic study area vector. parameter allows user overwrite geographicDesciption value provided project config.yaml. baseURL (character) base path web-accessible location data file; name resulting file passed base path generate web-resolvable file path. parameter required default set CAP LTER file path projectNaming (logical) Logical indicating vector file (parent directory zipFiles == TRUE) renamed per style used CAP LTER (default) project id + base file name + md5sum + file extension. passed file directory name used parameter set FALSE.","code":""},{"path":"/reference/create_spatialVector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a spatial file of type KML and create metadata of type spatial vector (deprecated: use create_vector or create_vector_shape) — create_spatialVector","text":"EML spatialVector object returned. Additionally, spatial data  entity written file type kml, renamed project id +  base file name + file extension (kml case).","code":""},{"path":"/reference/create_spatialVector.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct a spatial file of type KML and create metadata of type spatial vector (deprecated: use create_vector or create_vector_shape) — create_spatialVector","text":"create_spatialVector creates EML spatialVector object  spatial data object (shapefile, kml) read R environment.  function reads attributes classes contained within supporting  yaml file generated capeml::write_attributes function -  create_spatialVector look file working directory  name type spatialEntityName_attrs.yaml. attributes written  kml (output create_spatialVector type character, factors  considered workflow). Note functionality predicated  existence file containing metadata attributes,  file working directory, file matches name  spatial data entity precisely. addition generating EML entity  type spatialVector, create_spatialVector writes spatial entity R  environment file type kml. Unless projectNaming set false,  output file renamed file project id + base file name + file  extension (kml case).","code":""},{"path":"/reference/create_spatialVector.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Construct a spatial file of type KML and create metadata of type spatial vector (deprecated: use create_vector or create_vector_shape) — create_spatialVector","text":"create_spatialVector look package number (packageNum)  config.yaml; parameter passed function must exist. create_spatialVector currently accepts argument base url path  new file name appended web-resolvable  file; package defaults URL specific CAP LTER. file name metadata incorporated kml generated  sf::st_write function, including md5 hash object file  name sensu products generated capeml* packages feasible  spatialVector objects. vector objects transformed epsg 4326 (WGS 1984)","code":""},{"path":"/reference/create_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a spatial file of type KML or GeoJSON and create metadata of type spatial vector — create_vector","title":"Construct a spatial file of type KML or GeoJSON and create metadata of type spatial vector — create_vector","text":"create_vector writes spatial data file type KML generates corresponding metadata EML entity type spatialVector","code":""},{"path":"/reference/create_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a spatial file of type KML or GeoJSON and create metadata of type spatial vector — create_vector","text":"","code":"create_vector(   vector_name,   description,   driver = \"GeoJSON\",   geoDescription = NULL,   overwrite = FALSE,   projectNaming = TRUE,   missing_value_code = NULL )"},{"path":"/reference/create_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a spatial file of type KML or GeoJSON and create metadata of type spatial vector — create_vector","text":"vector_name (character) quoted unquoted name spatial data object R environment. description (character) Quoted description vector resource. driver (character) Quoted format output file: KML GeoJSON (default). geoDescription (character) textual description geographic study area vector. parameter allows user overwrite geographicDesciption value provided project config.yaml. overwrite (logical) logical indicating whether overwrite existing file bearing name file written. projectNaming (logical) Logical indicating resulting file renamed per style used capeml ecosystem project id + base file name + file extension. set FALSE, resulting file bear name object assigned R environment appropriate file extension. missing_value_code (character) Quoted character(s) flag, addition NA NaN, used indicate missing values within data.","code":""},{"path":"/reference/create_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a spatial file of type KML or GeoJSON and create metadata of type spatial vector — create_vector","text":"EML spatialVector object returned. Additionally, spatial data entity written file type kml GeoJSON.","code":""},{"path":"/reference/create_vector.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct a spatial file of type KML or GeoJSON and create metadata of type spatial vector — create_vector","text":"create_vector creates EML spatialVector object spatial data object read created within R environment. present, function reads attribute factor metadata supporting yaml file(s) generated capeml::write_attributes() capeml::write_factors() functions - create_vector look files working directory name type \"entity name\"_attrs.yaml (\"entity name\"_attrs.csv older project) attribute metadata, \"entity name\"_factors.yaml (\"entity name\"_factors.csv older project) factor metadata. Note functionality predicated existence file containing metadata attributes, file working directory, file matches name spatial data entity precisely.","code":""},{"path":"/reference/create_vector.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Construct a spatial file of type KML or GeoJSON and create metadata of type spatial vector — create_vector","text":"project naming TRUE create_vector look package number (packageNum (deprecated) identifier) config.yaml; parameter passed function must exist. vector objects transformed epsg 4326 (WGS 1984)","code":""},{"path":"/reference/create_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a spatial file of type KML or GeoJSON and create metadata of type spatial vector — create_vector","text":"","code":"if (FALSE) { # \\dontrun{  # load spatial vector object; because create_vector will generate a new kml or GeoJSON file, we # have complete flexibility over the resulting file name and manipulating # the data - here we are starting with an existing shapefile named CORETT but # will generate a kml with the name ejido_titles_points_of_decree   ejido_titles_points_of_decree <- sf::read_sf(   dsn = \"data/Regularizacion/ejidal\",   layer = \"CORETT\"   ) %>% select(   -OBJECTID_1,   -FolderNumb,   -Surface   ) %>% mutate(   Id = as.character(Id),   across(where(is.character), ~ gsub(pattern = \"\\\\r\\\\n\", replacement = \"\", x = .)),   across(where(is.character), ~ gsub(pattern = \"--\", replacement = NA_character_, x = .)),   Year = as.character(Year) )  # write attributes (and factors if relevant)  try(write_attributes(ejido_titles_points_of_decree, overwrite = FALSE))  # generate a description for the data entity  ejido_titles_points_of_decree_desc <- \"polygons of land regularized by the National Agency, CORETT; polygons were georeferenced from 281 paper maps, consolidated into 87 unique regularization degrees of ejidos that became privitzed from 1987-2007; includes the area of each polygon, the date of regularization, the name of the ejido, the delegation, and the 'plane number' that could be used to find the original map file in the CORETT office; it only includes expropriation for the delegations Xochimilco, Magdalena Contreras, Iztapalapa, Tlahuac, Gustavo Madero, Cuajimalpa, Alvaro Obregon, Tlalpan, Coyoacan, and Milpa Alta\"  ejido_titles_points_of_decree_SV <- create_vector(   vector_name = ejido_titles_points_of_decree,   description = ejido_titles_points_of_decree_desc,   driver = \"kml\",   overwrite = TRUE,   projectNaming = TRUE   )  # The resulting spatialVector entity can be added to a EML dataset  } # }"},{"path":"/reference/create_vector_shape.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct an ESRI shapefile and create metadata of type spatial vector — create_vector_shape","title":"Construct an ESRI shapefile and create metadata of type spatial vector — create_vector_shape","text":"create_vector_shape generates EML entity type spatialVector. function allows user build shapefile accompanying metadata spatial object read created within R environment. resulting shapefile written directory zipped inclusion data package.","code":""},{"path":"/reference/create_vector_shape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct an ESRI shapefile and create metadata of type spatial vector — create_vector_shape","text":"","code":"create_vector_shape(   vector_name,   description,   geoDescription = NULL,   coord_sys,   layer_opts = NULL,   overwrite = FALSE,   projectNaming = TRUE,   missing_value_code = NULL )"},{"path":"/reference/create_vector_shape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct an ESRI shapefile and create metadata of type spatial vector — create_vector_shape","text":"vector_name (character) unquoted name spatial object R environment. description (character) Description vector resource. geoDescription (character) textual description geographic coverage vector. provided, project-level geographic desciption config.yaml used. coord_sys (character) quoted EML-compliant name coordinate reference system. layer_opts (character) Additional options generating shapefile passed sf::st_write function overwrite (logical) logical indicating whether overwrite existing directory bearing name shapefile. projectNaming (logical) Logical indicating zipped directory renamed per style used within capeml ecosystem (default) project id + base file name + md5sum + file extension (zip case). name shapefile + file extension (zip case) used set FALSE. Note applies zipped directory, files constitute shapefile renamed. missing_value_code (character) Quoted character(s) flag, addition NA NaN, used indicate missing values within data.","code":""},{"path":"/reference/create_vector_shape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct an ESRI shapefile and create metadata of type spatial vector — create_vector_shape","text":"object type EML spatialVector returned. Additionally, files make single shapefile harvested new directory zipped inclusion data package.","code":""},{"path":"/reference/create_vector_shape.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct an ESRI shapefile and create metadata of type spatial vector — create_vector_shape","text":"Unlike package_vector_shape function capemlGIS package, create_vector_shape writes new shapefile file. allows user produce shapefile corresponding metadata either loading spatial object R environment creating spatial object R environment. shapefile written file packaged within new directory zipped inclusion data package. new spatial object created, data can modified needed. present, function reads attribute factor metadata supporting yaml file(s) generated capeml::write_attributes() capeml::write_factors() functions - create_vector_shape look files working directory name type \"entity name\"_attrs.yaml (\"entity name\"_attrs.csv older project) attribute metadata, \"entity name\"_factors.yaml (\"entity name\"_factors.csv older project) factor metadata. Note functionality predicated existence file containing metadata attributes, file working directory, file matches name spatial data entity precisely.","code":""},{"path":"/reference/create_vector_shape.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Construct an ESRI shapefile and create metadata of type spatial vector — create_vector_shape","text":"project naming TRUE create_vector look package number (packageNum (deprecated) identifier) config.yaml; parameter passed function must exist. shapefile generated create_vector_shape coordinate reference system (CRS) input spatial object.","code":""},{"path":"/reference/create_vector_shape.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct an ESRI shapefile and create metadata of type spatial vector — create_vector_shape","text":"","code":"if (FALSE) { # \\dontrun{  # load spatial vector object; because create_vector_shape will generate a # new shapefile, we have complete flexibility over the shapefile name and # manipulating the data - here we are starting with an existing shapefile # named CORETT but will generate a shapefile with the name # ejido_titles_points_of_decree   ejido_titles_points_of_decree <- sf::read_sf(   dsn   = \"data/Regularizacion/ejidal\",   layer = \"CORETT\"   ) %>% dplyr::select(   -OBJECTID_1,   -FolderNumb,   -Surface   ) %>% dplyr::mutate(   Id = as.character(Id),   across(where(is.character), ~ gsub(pattern = \"\\\\r\\\\n\", replacement = \"\", x = .)),   across(where(is.character), ~ gsub(pattern = \"--\", replacement = NA_character_, x = .)),   Year = as.character(Year) )  # write attributes (and factors if relevant)  try(write_attributes(ejido_titles_points_of_decree, overwrite = FALSE))  # generate a description for the data entity  ejido_titles_points_of_decree_desc <- \"polygons of land regularized by the National Agency, CORETT; polygons were georeferenced from 281 paper maps, consolidated into 87 unique regularization degrees of ejidos that became privitzed from 1987-2007; includes the area of each polygon, the date of regularization, the name of the ejido, the delegation, and the 'plane number' that could be used to find the original map file in the CORETT office; it only includes expropriation for the delegations Xochimilco, Magdalena Contreras, Iztapalapa, Tlahuac, Gustavo Madero, Cuajimalpa, Alvaro Obregon, Tlalpan, Coyoacan, and Milpa Alta\"  ejido_titles_points_of_decree_SV <- create_vector_shape(   vector_name = ejido_titles_points_of_decree,   description = ejido_titles_points_of_decree_desc,   coord_sys = \"WGS_1984_UTM_Zone_55N\",   layer_opts = \"SHPT=POLYGON\",   overwrite = TRUE,   projectNaming = TRUE,   )  # The resulting spatialVector entity can be added to a EML dataset. # Note also in this example that we are passing additional layer options, # which ultimately feed to sf::st_write, necessary here to generate a # multi-polygon shapefile.  } # }"},{"path":"/reference/emlCoordSystems.html","id":null,"dir":"Reference","previous_headings":"","what":"EML-compliant coordinate system names — emlCoordSystems","title":"EML-compliant coordinate system names — emlCoordSystems","text":"EML defined list coordinate systems permissible generate valid EML. emlCoordSystems list (data frame) string values. get_emlProjection() function attempts match coordinate system metadata inherent spatial data entity corresponding EML-compliant name listed emlCoordSystems.","code":""},{"path":"/reference/emlCoordSystems.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EML-compliant coordinate system names — emlCoordSystems","text":"","code":"emlCoordSystems"},{"path":"/reference/emlCoordSystems.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"EML-compliant coordinate system names — emlCoordSystems","text":"data frame","code":""},{"path":"/reference/emlCoordSystems.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"EML-compliant coordinate system names — emlCoordSystems","text":"https://knb.ecoinformatics.org/#external//emlparser/docs/eml-2.1.1/./eml-spatialReference.html","code":""},{"path":"/reference/eml_valid_crs.html","id":null,"dir":"Reference","previous_headings":"","what":"Tibble of valid EML CRS descriptions and EPSG codes — eml_valid_crs","title":"Tibble of valid EML CRS descriptions and EPSG codes — eml_valid_crs","text":"data include EML-compliant descriptions hoorizontal coordinate systems corresponding EPSG codes selected coordinate systems. Additional relationships (.e., making connections EPSG code corresponding description needed EML) can made making connections data-raw/eml_valid_crs.R pacakge.","code":""},{"path":"/reference/eml_valid_crs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tibble of valid EML CRS descriptions and EPSG codes — eml_valid_crs","text":"","code":"eml_valid_crs"},{"path":"/reference/eml_valid_crs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Tibble of valid EML CRS descriptions and EPSG codes — eml_valid_crs","text":"data frame 4 rows 2 variables: value EML-compliant textual description projection epsg four- five-digit EPSG code corresponding textual description coordinate system","code":""},{"path":"/reference/eml_valid_crs.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Tibble of valid EML CRS descriptions and EPSG codes — eml_valid_crs","text":"https://raw.githubusercontent.com/NCEAS/eml/main/xsd/eml-spatialReference.xsd","code":""},{"path":"/reference/find_element.html","id":null,"dir":"Reference","previous_headings":"","what":"find attributes with units — find_element","title":"find attributes with units — find_element","text":"find_element helper function create_raster checks presence particular element list. case, use find_element determine raster attributes metadata units.","code":""},{"path":"/reference/find_element.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"find attributes with units — find_element","text":"","code":"find_element(attributes, element)"},{"path":"/reference/get_emlProjection.html","id":null,"dir":"Reference","previous_headings":"","what":"get_emlProjection attempts to identify the projection of a spatial data file, and match this to the corresponding projection ID permissible by EML (deprecated) — get_emlProjection","title":"get_emlProjection attempts to identify the projection of a spatial data file, and match this to the corresponding projection ID permissible by EML (deprecated) — get_emlProjection","text":"get_emlProjection attempts identify projection   spatial data file, match corresponding projection ID   permissible EML.","code":""},{"path":"/reference/get_emlProjection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_emlProjection attempts to identify the projection of a spatial data file, and match this to the corresponding projection ID permissible by EML (deprecated) — get_emlProjection","text":"","code":"get_emlProjection(spatialDataEntity)"},{"path":"/reference/get_emlProjection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_emlProjection attempts to identify the projection of a spatial data file, and match this to the corresponding projection ID permissible by EML (deprecated) — get_emlProjection","text":"spatialDataEntity spatial data entity, often loaded R raster (rasters) rgdal (vectors) packages","code":""},{"path":"/reference/get_emlProjection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_emlProjection attempts to identify the projection of a spatial data file, and match this to the corresponding projection ID permissible by EML (deprecated) — get_emlProjection","text":"suitable match found, function returns EML-compliant   listing projection spatial data object","code":""},{"path":"/reference/get_emlProjection.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"get_emlProjection attempts to identify the projection of a spatial data file, and match this to the corresponding projection ID permissible by EML (deprecated) — get_emlProjection","text":"get_emlProjection helper function designed primarily assist   creation EML spatial data objects. function currently   restricted matching coordinate systems northern hemisphere,   match projections type transverse mercator. Though intended   primarily helper function, get_emlProjection can run independently.","code":""},{"path":"/reference/get_emlProjection.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"get_emlProjection attempts to identify the projection of a spatial data file, and match this to the corresponding projection ID permissible by EML (deprecated) — get_emlProjection","text":"get_emlProjection currently restricted matching coordinate   systems northern hemisphere, match projections type   transverse mercator.","code":""},{"path":"/reference/get_emlProjection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get_emlProjection attempts to identify the projection of a spatial data file, and match this to the corresponding projection ID permissible by EML (deprecated) — get_emlProjection","text":"","code":"if (FALSE) { # \\dontrun{ vectorData <- readOGR(dsn=\"/GISfiles/WatershedShapefile/\", layer=\"AZwatersheds_prj\") rasterdata <- raster(\"CAP_1985.img\") emlCompliantProjection <- get_emlProjection(rasterdata) } # }"},{"path":"/reference/list_crs.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a list of EML-compliant coordinate reference system (CRS) — list_crs","title":"Generate a list of EML-compliant coordinate reference system (CRS) — list_crs","text":"list_crs helper function provides convenient access list EML-compliant coordinate references systems (CRSs).","code":""},{"path":"/reference/list_crs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a list of EML-compliant coordinate reference system (CRS) — list_crs","text":"","code":"list_crs()"},{"path":"/reference/list_crs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a list of EML-compliant coordinate reference system (CRS) — list_crs","text":"list EML-compliant coordinate reference systems (CRSs)","code":""},{"path":"/reference/package_vector_shape.html","id":null,"dir":"Reference","previous_headings":"","what":"Create metadata of type spatial vector and package shapefile into a zipped directory — package_vector_shape","title":"Create metadata of type spatial vector and package shapefile into a zipped directory — package_vector_shape","text":"package_vector_shape generates EML entity type spatialVector, harvests relevant files constitute single shapefile directory zipped.","code":""},{"path":"/reference/package_vector_shape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create metadata of type spatial vector and package shapefile into a zipped directory — package_vector_shape","text":"","code":"package_vector_shape(   dsn,   layer,   description,   geoDescription = NULL,   coord_sys,   overwrite = FALSE,   projectNaming = TRUE,   missing_value_code = NULL )"},{"path":"/reference/package_vector_shape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create metadata of type spatial vector and package shapefile into a zipped directory — package_vector_shape","text":"dsn (character) quoted name directory shapefile located. trailing slash directory included. layer (character) quoted name shapefile (without file extension). description (character) Description vector resource. geoDescription (character) textual description geographic coverage vector. provided, project-level geographic desciption config.yaml used. coord_sys (character) quoted EML-compliant name coordinate reference system. overwrite (logical) logical indicating whether overwrite existing directory bearing name shapefile. projectNaming (logical) Logical indicating zipped directory renamed per style used within capeml ecosystem (default) project id + base file name + md5sum + file extension (zip case). name shapefile + file extension (zip case) used set FALSE. Note applies zipped directory, files constitute shapefile renamed. missing_value_code (character) Quoted character(s) flag, addition NA NaN, used indicate missing values within data.","code":""},{"path":"/reference/package_vector_shape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create metadata of type spatial vector and package shapefile into a zipped directory — package_vector_shape","text":"object type EML spatialVector returned. Additionally, files make single shapefile harvested new directory zipped inclusion data package.","code":""},{"path":"/reference/package_vector_shape.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create metadata of type spatial vector and package shapefile into a zipped directory — package_vector_shape","text":"Unlike capemlGIS functions managing vector data, package_vector_shape create new spatial entity rather collects files consititue single shapefile, aggregates files single directory, zips directory inclusion data package. Metadata generated spatial aspects data physical aspects zipped directory. new spatial object created, metadata must constructed data exist. , data operations can performed, classifying numerical ID field character require unit, data metadata constructed edited. present, function reads attribute factor metadata supporting yaml file(s) generated capeml::write_attributes() capeml::write_factors() functions - package_vector_shape look files working directory name type \"entity name\"_attrs.yaml (\"entity name\"_attrs.csv older project) attribute metadata, \"entity name\"_factors.yaml (\"entity name\"_factors.csv older project) factor metadata. Note functionality predicated existence file containing metadata attributes, file working directory, file matches name spatial data entity precisely.","code":""},{"path":"/reference/package_vector_shape.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create metadata of type spatial vector and package shapefile into a zipped directory — package_vector_shape","text":"project naming TRUE create_vector look package number (packageNum (deprecated) identifier) config.yaml; parameter passed function must exist.","code":""},{"path":"/reference/package_vector_shape.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create metadata of type spatial vector and package shapefile into a zipped directory — package_vector_shape","text":"","code":"if (FALSE) { # \\dontrun{  # read spatial data into R and manipulate as necessary (but minimally as a # new data object is not created so the metadata should reflect the unaltered # source data) CORETT <- sf::read_sf(   dsn = \"data/\",   layer = \"CORETT\"   ) %>% mutate(   Id = as.character(Id),   Year = as.character(Year) )  # write an attributes metadata template (and factors if relevant (not shown)) try(capeml::write_attributes(CORETT, overwrite = TRUE))  # generate a description for the data entity corett_desc <- \"polygons of land regularized by the National Agency, CORETT; polygons were georeferenced from 281 paper maps, consolidated into 87 unique regularization degrees of ejidos that became privitzed from 1987-2007; includes the area of each polygon, the date of regularization, the name of the ejido, the delegation, and the 'plane number' that could be used to find the original map file in the CORETT office; it only includes expropriation for the delegations Xochimilco, Magdalena Contreras, Iztapalapa, Tlahuac, Gustavo Madero, Cuajimalpa, Alvaro Obregon, Tlalpan, Coyoacan, and Milpa Alta\"  # generate the spatial vector object, which can now be incorporated into our # EML dataset metadata; here we are relying on the geographic description in # the project config.yaml but we could overwrite that by passing an argument # to the geoDescription parameter if appropriate.  corett_SV <- package_vector_shape(   dsn           = \"~/Desktop/shapedir/data\",   layer         = \"CORETT\",   description   = corett_desc,   geoDescription,   coord_sys     = \"WGS_1984_UTM_Zone_55N\",   overwrite     = TRUE,   projectNaming = TRUE   )  # The resulting spatialVector entity can be added to a EML dataset  } # }"},{"path":"/reference/write_raster_factors.html","id":null,"dir":"Reference","previous_headings":"","what":"create a template as a yaml file for supplying code definition metadata for spatial rasters if raster values are categorical — write_raster_factors","title":"create a template as a yaml file for supplying code definition metadata for spatial rasters if raster values are categorical — write_raster_factors","text":"write_raster_factors creates template yaml file supplying code definition metadata spatial rasters raster values categorical.","code":""},{"path":"/reference/write_raster_factors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create a template as a yaml file for supplying code definition metadata for spatial rasters if raster values are categorical — write_raster_factors","text":"","code":"write_raster_factors(raster_file, raster_entity, value_name, overwrite = FALSE)"},{"path":"/reference/write_raster_factors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create a template as a yaml file for supplying code definition metadata for spatial rasters if raster values are categorical — write_raster_factors","text":"raster_file (character) Quoted full path raster file. raster_entity (character) Unquoted name raster object R environment. value_name (character) Quoted name describing raster value category (category, code, level common examples) overwrite (logical) Overwrite existing template one exists.","code":""},{"path":"/reference/write_raster_factors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"create a template as a yaml file for supplying code definition metadata for spatial rasters if raster values are categorical — write_raster_factors","text":"template providing code definition metadata yaml file file name raster + \"_factors.yaml\" (created working directory).","code":""},{"path":"/reference/write_raster_factors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"create a template as a yaml file for supplying code definition metadata for spatial rasters if raster values are categorical — write_raster_factors","text":"Generate yaml template file supports ability provide definition level categorical type. resulting yaml file written name raster file + \"_factors\". create_spatialRaster function search file creating EML spatialRaster entity.","code":""},{"path":"/reference/write_raster_factors.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"create a template as a yaml file for supplying code definition metadata for spatial rasters if raster values are categorical — write_raster_factors","text":"write_raster_factors take input either object class raster already environment (raster_entity) read raster file (raster_entity) given path filename. Constructing template can extremely computationally time intensive large rasters.","code":""},{"path":"/reference/write_raster_factors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"create a template as a yaml file for supplying code definition metadata for spatial rasters if raster values are categorical — write_raster_factors","text":"","code":"if (FALSE) { # \\dontrun{  capemlGIS::write_raster_factors(  raster_entity = denp3p1,  value_name    = \"lulc_codes\" )  capemlGIS::write_raster_factors(  raster_file = \"file-path-to/denp3p1.img\",  value_name  = \"weight_class_bins\" )  } # }"},{"path":"/reference/zipRelatedFiles.html","id":null,"dir":"Reference","previous_headings":"","what":"zipRelatedFiles — zipRelatedFiles","title":"zipRelatedFiles — zipRelatedFiles","text":"Zip files common directory share base name   (.e., file name sans path extension). Zipped file includes   relevant files zipped single, compressed file named : projectid +   basefile name + md5sum + extension (zip).","code":""},{"path":"/reference/zipRelatedFiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"zipRelatedFiles — zipRelatedFiles","text":"","code":"zipRelatedFiles(pathToFile, targetFile)"},{"path":"/reference/zipRelatedFiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"zipRelatedFiles — zipRelatedFiles","text":"pathToFile quoted name directory target file located directory targetFile quoted name target data file file names prescribed directory evalated directory","code":""},{"path":"/reference/zipRelatedFiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"zipRelatedFiles — zipRelatedFiles","text":"zipped file name inclusion EML documentation -   relevant run independently","code":""},{"path":"/reference/zipRelatedFiles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"zipRelatedFiles — zipRelatedFiles","text":"zipRelatedFiles helper function designed primarily assist   creation EML spatial data objects. spatial data entity often   consists one file (e.g., shapefiles; raster (*.img, *.xml))   incorporated single zipped file upload PASTA.   function zips related files determined base file name (e.g.,   CAP_1985.img CAP_1985.img.aux.xml share base name   zipped). keeping CAP LTER workflow generating EML metadata,   resulting compressed file named projectid + basefile name + md5sum +   extension (zip). Though intended primarily helper function,   zipRelatedFiles can run independently.","code":""},{"path":"/reference/zipRelatedFiles.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"zipRelatedFiles — zipRelatedFiles","text":"zipRelatedFiles specific UNIX operating environments.","code":""},{"path":"/reference/zipRelatedFiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"zipRelatedFiles — zipRelatedFiles","text":"","code":"if (FALSE) { # \\dontrun{ zipRelatedFiles(   pathToFile = \"~/folder/\",   targetFile = \"CAP_1985.img\") } # }"}]
